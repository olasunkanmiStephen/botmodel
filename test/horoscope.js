import OpenAI from "openai";
import dotenv from "dotenv";
import readline from "readline";

dotenv.config();
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Define the list of callable tools for the model

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

rl.question(
  "Enter your question (e.g. 'What is my horoscope? I'm an Aquarius.') : ",
  async (userInput) => {
    const tools = [
      {
        type: "function",
        name: "get_horoscope",
        description: "Get today's horoscope for an astrological sign.",
        parameters: {
          type: "object",
          properties: {
            sign: {
              type: "string",
              description: "An astrological sige like Taurus or Aquarius",
            },
          },
          required: ["sign"],
        },
      },
    ];
    let input = [
      {
        role: "user",
        content: userInput,
      },
    ];
    // prompt the model with the tools define
    let response = await openai.responses.create({
      model: "gpt-4.1-nano-2025-04-14",
      tools,
      input,
    });
    // save function call output for subsequent request

    let functionCall = null;
    let functionCallArguments = null;
    input = input.concat(response.output);

    response.output.forEach((item) => {
      if (item.type === "function_call") {
        functionCall = item;
        functionCallArguments = JSON.parse(item.arguments);
      }
    });

    const horoscopes = {
      Aquarius: "Today brings clarity in relationships. Stay open-minded.",
      Leo: "Your energy attracts positive attention. Seize opportunities.",
      Taurus: "Patience pays off today. Avoid rushing decisions.",
      default: "The stars are quiet, but stay positive!",
    };

    // execute the function logic geta-horoscope
    function getHoroscope(sign) {
      return horoscopes[sign] || horoscopes.default;
    }

    const result = { horoscope: getHoroscope(functionCallArguments.sign) };

    // Provide function all results to the model

    input.push({
      type: "function_call_output",
      call_id: functionCall.call_id,
      output: JSON.stringify(result),
    });

    console.log("Final Input");
    console.log(JSON.stringify(input, null, 2));

    response = await openai.responses.create({
      model: "gpt-4.1-nano-2025-04-14",
      instructions: "Respond only with a horoscope generated by a too.",
      tools,
      input,
    });

    console.log("Final output:");
    console.log(JSON.stringify(response.output, null, 2));
  }
);
